// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  todos         Todo[]
  notifications Notification[]

  @@map("users")
}

model Todo {
  id          String      @id @default(cuid())
  title       String
  description String?
  completed   Boolean     @default(false)
  priority    Priority    @default(MEDIUM)
  dueDate     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String

  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  notifications Notification[]
  tags         TodoTag[]

  @@map("todos")
}

model Tag {
  id    String @id @default(cuid())
  name  String @unique
  color String @default("#3B82F6")

  todos TodoTag[]

  @@map("tags")
}

model TodoTag {
  todoId String
  tagId  String

  todo Todo @relation(fields: [todoId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([todoId, tagId])
  @@map("todo_tags")
}

model Notification {
  id        String           @id @default(cuid())
  title     String
  message   String
  type      NotificationType @default(REMINDER)
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())
  userId    String
  todoId    String?

  user User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  todo Todo? @relation(fields: [todoId], references: [id], onDelete: SetNull)

  @@map("notifications")
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum NotificationType {
  REMINDER
  DEADLINE
  COMPLETED
  ASSIGNED
}